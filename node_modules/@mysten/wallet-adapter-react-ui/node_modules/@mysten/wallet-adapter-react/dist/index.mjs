// src/WalletContext.tsx
import {
  createContext,
  useCallback,
  useContext,
  useEffect as useEffect2,
  useMemo,
  useState as useState2
} from "react";

// src/useWalletAdapters.ts
import {
  isWalletProvider,
  resolveAdapters
} from "@mysten/wallet-adapter-base";
import { useEffect, useState } from "react";
function useWalletAdapters(adapterAndProviders) {
  const [wallets, setWallets] = useState(
    () => resolveAdapters(adapterAndProviders)
  );
  useEffect(() => {
    const providers = adapterAndProviders.filter(isWalletProvider);
    if (!providers.length)
      return;
    setWallets(resolveAdapters(adapterAndProviders));
    const listeners = providers.map(
      (provider) => provider.on("changed", () => {
        setWallets(resolveAdapters(adapterAndProviders));
      })
    );
    return () => {
      listeners.forEach((unlisten) => unlisten());
    };
  }, [adapterAndProviders]);
  return wallets;
}

// src/WalletContext.tsx
import { jsx } from "react/jsx-runtime";
var DEFAULT_STORAGE_KEY = "preferredSuiWallet";
var WalletContext = createContext(null);
var WalletProvider = ({
  children,
  adapters
}) => {
  const wallets = useWalletAdapters(adapters);
  const [wallet, setWallet] = useState2(null);
  const [connected, setConnected] = useState2(false);
  const [connecting, setConnecting] = useState2(false);
  const disconnect = useCallback(async () => {
    wallet == null ? void 0 : wallet.disconnect();
    setConnected(false);
    setWallet(null);
    localStorage.removeItem(DEFAULT_STORAGE_KEY);
  }, []);
  useEffect2(() => {
    if (connected && wallet) {
      localStorage.setItem(DEFAULT_STORAGE_KEY, wallet.name);
    }
  }, [wallet, connected]);
  const select = useCallback(
    async (name) => {
      let selectedWallet = wallets.find((wallet2) => wallet2.name === name) ?? null;
      setWallet(selectedWallet);
      if (selectedWallet && !selectedWallet.connecting) {
        try {
          setConnecting(true);
          await selectedWallet.connect();
          setConnected(true);
        } catch (e) {
          setConnected(false);
        } finally {
          setConnecting(false);
        }
      }
    },
    [wallets]
  );
  useEffect2(() => {
    if (!wallet && !connected && !connecting) {
      let preferredWallet = localStorage.getItem(DEFAULT_STORAGE_KEY);
      if (typeof preferredWallet === "string") {
        select(preferredWallet);
      }
    }
  }, [wallet, connected, connecting, select]);
  const walletContext = useMemo(
    () => ({
      adapters,
      wallets,
      wallet,
      connecting,
      connected,
      select,
      disconnect,
      async getAccounts() {
        if (wallet == null)
          throw Error("Wallet Not Connected");
        return wallet.getAccounts();
      },
      async signAndExecuteTransaction(transaction) {
        if (wallet == null) {
          throw new Error("Wallet Not Connected");
        }
        if (!wallet.signAndExecuteTransaction) {
          throw new Error(
            'Wallet does not support "signAndExecuteTransaction" method'
          );
        }
        return wallet.signAndExecuteTransaction(transaction);
      }
    }),
    [wallets, adapters, wallet, select, disconnect, connecting, connected]
  );
  return /* @__PURE__ */ jsx(WalletContext.Provider, {
    value: walletContext,
    children
  });
};
function useWallet() {
  const context = useContext(WalletContext);
  if (!context) {
    throw new Error(
      "You tried to access the `WalletContext` outside of the `WalletProvider`."
    );
  }
  return context;
}
export {
  WalletContext,
  WalletProvider,
  useWallet
};
//# sourceMappingURL=index.mjs.map