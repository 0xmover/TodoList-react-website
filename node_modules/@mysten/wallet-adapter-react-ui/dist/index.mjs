// src/ConnectWalletModal.tsx
import {
  Box,
  Button,
  List,
  Modal,
  Typography,
  ListItemButton,
  ListItemText,
  CircularProgress
} from "@mui/material";
import { useState } from "react";
import { useWallet } from "@mysten/wallet-adapter-react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
function ConnectWalletModal(props) {
  let { connected } = useWallet();
  const [open, setOpen] = useState(false);
  const handleClickOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const { wallets, wallet, select, connecting } = useWallet();
  const handleConnect = (walletName) => {
    select(walletName);
    handleClose();
  };
  const style = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 300,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    p: 4,
    borderRadius: 2
  };
  const connectButtonStyle = {
    borderRadius: 7,
    backgroundColor: "#6fbcf0",
    fontWeight: 600
  };
  return /* @__PURE__ */ jsx(Fragment, {
    children: !connected && /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsx(Button, {
          style: connectButtonStyle,
          variant: "contained",
          onClick: handleClickOpen,
          children: "Connect To Wallet"
        }),
        /* @__PURE__ */ jsx(Modal, {
          open,
          onClose: handleClose,
          children: /* @__PURE__ */ jsxs(Fragment, {
            children: [
              !connecting && /* @__PURE__ */ jsxs(Box, {
                sx: style,
                children: [
                  /* @__PURE__ */ jsx(Typography, {
                    id: "modal-modal-title",
                    variant: "h6",
                    component: "h2",
                    align: "center",
                    children: "Select Wallet"
                  }),
                  /* @__PURE__ */ jsx(List, {
                    children: wallets.map((wallet2, i) => /* @__PURE__ */ jsx(ListItemButton, {
                      onClick: () => handleConnect(wallet2.name),
                      children: /* @__PURE__ */ jsx(ListItemText, {
                        primary: wallet2.name
                      })
                    }, i))
                  })
                ]
              }),
              connecting && /* @__PURE__ */ jsxs(Box, {
                sx: style,
                children: [
                  /* @__PURE__ */ jsxs(Typography, {
                    id: "modal-modal-title",
                    variant: "h6",
                    component: "h2",
                    children: [
                      "Connecting to ",
                      wallet ? wallet.name : "Wallet"
                    ]
                  }),
                  /* @__PURE__ */ jsx(CircularProgress, {})
                ]
              })
            ]
          })
        })
      ]
    })
  });
}

// src/ManageWalletModal.tsx
import {
  Box as Box2,
  Button as Button2,
  List as List2,
  Modal as Modal2,
  Typography as Typography2,
  ListItemButton as ListItemButton2,
  ListItemText as ListItemText2
} from "@mui/material";
import { useEffect as useEffect2, useState as useState2 } from "react";
import { useWallet as useWallet2 } from "@mysten/wallet-adapter-react";
import SettingsIcon from "@mui/icons-material/Settings";
import { Fragment as Fragment2, jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";
function ManageWalletModal(props) {
  let { connected, disconnect, wallet, getAccounts } = useWallet2();
  const [open, setOpen] = useState2(false);
  const [account, setAccount] = useState2("");
  const PK_DISPLAY_LENGTH = 10;
  useEffect2(() => {
    if (!connected)
      return;
    getAccounts().then((accounts) => {
      if (accounts && accounts.length) {
        setAccount(accounts[0]);
      }
    });
  }, [wallet, connected, getAccounts]);
  const handleClickOpen = () => {
    setOpen(true);
  };
  const handleClickDisconnect = () => {
    disconnect();
    setOpen(false);
  };
  const handleClose = (value) => {
    setOpen(false);
  };
  const style = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 300,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    p: 4,
    borderRadius: 2
  };
  const ManageWalletButtonStyle = {
    borderRadius: 7,
    backgroundColor: "#6fbcf0",
    fontWeight: 600
  };
  const handleCopyAddress = () => {
    navigator.clipboard.writeText(account);
  };
  return /* @__PURE__ */ jsx2(Fragment2, {
    children: connected && wallet && /* @__PURE__ */ jsxs2(Fragment2, {
      children: [
        /* @__PURE__ */ jsxs2(Button2, {
          color: "primary",
          variant: "contained",
          style: ManageWalletButtonStyle,
          onClick: handleClickOpen,
          children: [
            /* @__PURE__ */ jsx2(SettingsIcon, {}),
            " ",
            account.slice(0, PK_DISPLAY_LENGTH),
            "..."
          ]
        }),
        /* @__PURE__ */ jsx2(Modal2, {
          open,
          onClose: handleClose,
          children: /* @__PURE__ */ jsxs2(Box2, {
            sx: style,
            children: [
              /* @__PURE__ */ jsx2(Typography2, {
                id: "modal-modal-title",
                variant: "h6",
                component: "h2"
              }),
              /* @__PURE__ */ jsxs2(List2, {
                children: [
                  /* @__PURE__ */ jsx2(ListItemButton2, {
                    onClick: handleClickDisconnect,
                    children: /* @__PURE__ */ jsx2(ListItemText2, {
                      primary: "Disconnect"
                    })
                  }),
                  /* @__PURE__ */ jsx2(ListItemButton2, {
                    onClick: handleCopyAddress,
                    children: /* @__PURE__ */ jsx2(ListItemText2, {
                      primary: "Copy Address"
                    })
                  })
                ]
              })
            ]
          })
        })
      ]
    })
  });
}

// src/WalletWrapper.tsx
import { createTheme, ThemeProvider } from "@mui/material";
import { Fragment as Fragment3, jsx as jsx3, jsxs as jsxs3 } from "react/jsx-runtime";
var theme = createTheme({
  typography: {
    "fontFamily": `"IBM Plex Sans", sans-serif`
  }
});
function WalletWrapper({}) {
  return /* @__PURE__ */ jsx3(Fragment3, {
    children: /* @__PURE__ */ jsxs3(ThemeProvider, {
      theme,
      children: [
        /* @__PURE__ */ jsx3(ConnectWalletModal, {}),
        /* @__PURE__ */ jsx3(ManageWalletModal, {})
      ]
    })
  });
}
export {
  ConnectWalletModal,
  ManageWalletModal,
  WalletWrapper
};
//# sourceMappingURL=index.mjs.map