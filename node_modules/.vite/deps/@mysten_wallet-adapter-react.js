import {
  require_jsx_runtime
} from "./chunk-HYEDRLIU.js";
import {
  require_react
} from "./chunk-DGKP3T2N.js";
import {
  __toESM,
  init_buffer,
  init_process
} from "./chunk-6GU2SYS6.js";

// node_modules/@mysten/wallet-adapter-react/dist/index.mjs
init_process();
init_buffer();
var import_react = __toESM(require_react(), 1);

// node_modules/@mysten/wallet-adapter-base/dist/index.mjs
init_process();
init_buffer();
function isWalletAdapter(wallet) {
  return "connect" in wallet;
}
function isWalletProvider(wallet) {
  return !isWalletAdapter(wallet);
}
function resolveAdapters(adapterAndProviders) {
  return adapterAndProviders.flatMap((adapter) => {
    if (isWalletProvider(adapter)) {
      return adapter.get();
    }
    return adapter;
  });
}

// node_modules/@mysten/wallet-adapter-react/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function useWalletAdapters(adapterAndProviders) {
  const [wallets, setWallets] = (0, import_react2.useState)(
    () => resolveAdapters(adapterAndProviders)
  );
  (0, import_react2.useEffect)(() => {
    const providers = adapterAndProviders.filter(isWalletProvider);
    if (!providers.length)
      return;
    setWallets(resolveAdapters(adapterAndProviders));
    const listeners = providers.map(
      (provider) => provider.on("changed", () => {
        setWallets(resolveAdapters(adapterAndProviders));
      })
    );
    return () => {
      listeners.forEach((unlisten) => unlisten());
    };
  }, [adapterAndProviders]);
  return wallets;
}
var DEFAULT_STORAGE_KEY = "preferredSuiWallet";
var WalletConnectionStatus = ((WalletConnectionStatus2) => {
  WalletConnectionStatus2["DISCONNECTED"] = "DISCONNECTED";
  WalletConnectionStatus2["CONNECTING"] = "CONNECTING";
  WalletConnectionStatus2["CONNECTED"] = "CONNECTED";
  WalletConnectionStatus2["ERROR"] = "ERROR";
  return WalletConnectionStatus2;
})(WalletConnectionStatus || {});
var WalletContext = (0, import_react.createContext)(null);
var WalletProvider = ({
  children,
  adapters,
  autoConnect = true
}) => {
  const wallets = useWalletAdapters(adapters);
  const [status, setStatus] = (0, import_react.useState)(
    "DISCONNECTED"
    /* DISCONNECTED */
  );
  const [wallet, setWallet] = (0, import_react.useState)(null);
  const connected = status === "CONNECTED";
  const connecting = status === "CONNECTING";
  const isError = status === "ERROR";
  const disconnect = (0, import_react.useCallback)(async () => {
    wallet == null ? void 0 : wallet.disconnect();
    setStatus(
      "DISCONNECTED"
      /* DISCONNECTED */
    );
    setWallet(null);
    localStorage.removeItem(DEFAULT_STORAGE_KEY);
  }, []);
  (0, import_react.useEffect)(() => {
    if (connected && wallet) {
      localStorage.setItem(DEFAULT_STORAGE_KEY, wallet.name);
    }
  }, [wallet, connected]);
  const select = (0, import_react.useCallback)(
    async (name) => {
      let selectedWallet = wallets.find((wallet2) => wallet2.name === name) ?? null;
      setWallet(selectedWallet);
      if (selectedWallet && !selectedWallet.connecting) {
        try {
          setStatus(
            "CONNECTING"
            /* CONNECTING */
          );
          await selectedWallet.connect();
          setStatus(
            "CONNECTED"
            /* CONNECTED */
          );
        } catch (e) {
          console.log("Wallet connection error", e);
          setStatus(
            "ERROR"
            /* ERROR */
          );
        }
      } else {
        setStatus(
          "DISCONNECTED"
          /* DISCONNECTED */
        );
      }
    },
    [wallets]
  );
  (0, import_react.useEffect)(() => {
    if (!wallet && !connected && !connecting && autoConnect) {
      let preferredWallet = localStorage.getItem(DEFAULT_STORAGE_KEY);
      if (typeof preferredWallet === "string") {
        select(preferredWallet);
      }
    }
  }, [wallet, connected, connecting, select, autoConnect]);
  const walletContext = (0, import_react.useMemo)(
    () => ({
      adapters,
      wallets,
      wallet,
      status,
      connecting,
      connected,
      isError,
      select,
      disconnect,
      async getAccounts() {
        if (wallet == null)
          throw Error("Wallet Not Connected");
        return wallet.getAccounts();
      },
      async signAndExecuteTransaction(transaction) {
        if (wallet == null) {
          throw new Error("Wallet Not Connected");
        }
        if (!wallet.signAndExecuteTransaction) {
          throw new Error(
            'Wallet does not support "signAndExecuteTransaction" method'
          );
        }
        return wallet.signAndExecuteTransaction(transaction);
      }
    }),
    [
      wallets,
      adapters,
      wallet,
      select,
      disconnect,
      connecting,
      connected,
      status,
      isError
    ]
  );
  return (0, import_jsx_runtime.jsx)(WalletContext.Provider, {
    value: walletContext,
    children
  });
};
function useWallet() {
  const context = (0, import_react.useContext)(WalletContext);
  if (!context) {
    throw new Error(
      "You tried to access the `WalletContext` outside of the `WalletProvider`."
    );
  }
  return context;
}
export {
  WalletConnectionStatus,
  WalletContext,
  WalletProvider,
  useWallet
};
//# sourceMappingURL=@mysten_wallet-adapter-react.js.map
