{
  "version": 3,
  "sources": ["../../@mysten/wallet-adapter-react/src/WalletContext.tsx", "../../@mysten/wallet-adapter-react/src/useWalletAdapters.ts", "../../@mysten/wallet-adapter-base/src/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport type {\n  SuiAddress,\n  SuiTransactionResponse,\n  SignableTransaction,\n} from \"@mysten/sui.js\";\nimport { WalletAdapter, WalletAdapterList } from \"@mysten/wallet-adapter-base\";\nimport { useWalletAdapters } from \"./useWalletAdapters\";\n\nconst DEFAULT_STORAGE_KEY = \"preferredSuiWallet\";\n\nexport enum WalletConnectionStatus {\n  DISCONNECTED = \"DISCONNECTED\",\n  CONNECTING = \"CONNECTING\",\n  CONNECTED = \"CONNECTED\",\n  // TODO: Figure out if this is really a separate status, or is just a piece of state alongside the `disconnected` state:\n  ERROR = \"ERROR\",\n}\n\nexport interface WalletContextState {\n  adapters: WalletAdapterList;\n  wallets: WalletAdapter[];\n\n  // Wallet that we are currently connected to\n  wallet: WalletAdapter | null;\n\n  status: WalletConnectionStatus;\n  connecting: boolean;\n  connected: boolean;\n  isError: boolean;\n\n  select(walletName: string): void;\n  disconnect(): Promise<void>;\n\n  getAccounts: () => Promise<SuiAddress[]>;\n\n  signAndExecuteTransaction(\n    transaction: SignableTransaction\n  ): Promise<SuiTransactionResponse>;\n}\n\nexport const WalletContext = createContext<WalletContextState | null>(null);\n\n// TODO: Add storage adapter interface\n// TODO: Add storage key option\nexport interface WalletProviderProps {\n  children: ReactNode;\n  adapters: WalletAdapterList;\n  autoConnect?: boolean;\n}\n\nexport const WalletProvider: FC<WalletProviderProps> = ({\n  children,\n  adapters,\n  autoConnect = true,\n}) => {\n  const wallets = useWalletAdapters(adapters);\n\n  const [status, setStatus] = useState(WalletConnectionStatus.DISCONNECTED);\n  const [wallet, setWallet] = useState<WalletAdapter | null>(null);\n\n  const connected = status === WalletConnectionStatus.CONNECTED;\n  const connecting = status === WalletConnectionStatus.CONNECTING;\n  const isError = status === WalletConnectionStatus.ERROR;\n\n  const disconnect = useCallback(async () => {\n    wallet?.disconnect();\n    setStatus(WalletConnectionStatus.DISCONNECTED);\n    setWallet(null);\n    localStorage.removeItem(DEFAULT_STORAGE_KEY);\n  }, []);\n\n  // Once we connect, we remember that we've connected before to enable auto-connect:\n  useEffect(() => {\n    if (connected && wallet) {\n      localStorage.setItem(DEFAULT_STORAGE_KEY, wallet.name);\n    }\n  }, [wallet, connected]);\n\n  const select = useCallback(\n    async (name: string) => {\n      let selectedWallet =\n        wallets.find((wallet) => wallet.name === name) ?? null;\n\n      setWallet(selectedWallet);\n\n      if (selectedWallet && !selectedWallet.connecting) {\n        try {\n          setStatus(WalletConnectionStatus.CONNECTING);\n          await selectedWallet.connect();\n          setStatus(WalletConnectionStatus.CONNECTED);\n        } catch (e) {\n          console.log(\"Wallet connection error\", e);\n          setStatus(WalletConnectionStatus.ERROR);\n        }\n      } else {\n        setStatus(WalletConnectionStatus.DISCONNECTED);\n      }\n    },\n    [wallets]\n  );\n\n  // Auto-connect to the preferred wallet if there is one in storage:\n  useEffect(() => {\n    if (!wallet && !connected && !connecting && autoConnect) {\n      let preferredWallet = localStorage.getItem(DEFAULT_STORAGE_KEY);\n      if (typeof preferredWallet === \"string\") {\n        select(preferredWallet);\n      }\n    }\n  }, [wallet, connected, connecting, select, autoConnect]);\n\n  const walletContext = useMemo<WalletContextState>(\n    () => ({\n      adapters,\n      wallets,\n      wallet,\n      status,\n      connecting,\n      connected,\n      isError,\n      select,\n      disconnect,\n\n      async getAccounts() {\n        if (wallet == null) throw Error(\"Wallet Not Connected\");\n        return wallet.getAccounts();\n      },\n\n      async signAndExecuteTransaction(transaction) {\n        if (wallet == null) {\n          throw new Error(\"Wallet Not Connected\");\n        }\n        if (!wallet.signAndExecuteTransaction) {\n          throw new Error(\n            'Wallet does not support \"signAndExecuteTransaction\" method'\n          );\n        }\n        return wallet.signAndExecuteTransaction(transaction);\n      },\n    }),\n    [\n      wallets,\n      adapters,\n      wallet,\n      select,\n      disconnect,\n      connecting,\n      connected,\n      status,\n      isError,\n    ]\n  );\n\n  return (\n    <WalletContext.Provider value={walletContext}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport function useWallet(): WalletContextState {\n  const context = useContext(WalletContext);\n\n  if (!context) {\n    throw new Error(\n      \"You tried to access the `WalletContext` outside of the `WalletProvider`.\"\n    );\n  }\n\n  return context;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  WalletAdapterList,\n  isWalletProvider,\n  resolveAdapters,\n} from \"@mysten/wallet-adapter-base\";\nimport { useEffect, useState } from \"react\";\n\nexport function useWalletAdapters(adapterAndProviders: WalletAdapterList) {\n  const [wallets, setWallets] = useState(() =>\n    resolveAdapters(adapterAndProviders)\n  );\n\n  useEffect(() => {\n    const providers = adapterAndProviders.filter(isWalletProvider);\n    if (!providers.length) return;\n\n    // Re-resolve the adapters just in case a provider has injected\n    // before we've been able to attach an event listener:\n    setWallets(resolveAdapters(adapterAndProviders));\n\n    const listeners = providers.map((provider) =>\n      provider.on(\"changed\", () => {\n        setWallets(resolveAdapters(adapterAndProviders));\n      })\n    );\n\n    return () => {\n      listeners.forEach((unlisten) => unlisten());\n    };\n  }, [adapterAndProviders]);\n\n  return wallets;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  MoveCallTransaction,\n  SignableTransaction,\n  SuiAddress,\n  SuiTransactionResponse,\n} from \"@mysten/sui.js\";\n\nexport interface WalletAdapter {\n  // Metadata\n  name: string;\n  icon?: string;\n\n  connected: boolean;\n  connecting: boolean;\n  // Connection Management\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n\n  /**\n   * Suggest a transaction for the user to sign. Supports all valid transaction types.\n   */\n  signAndExecuteTransaction(\n    transaction: SignableTransaction\n  ): Promise<SuiTransactionResponse>;\n\n  getAccounts: () => Promise<SuiAddress[]>;\n}\n\ntype WalletAdapterProviderUnsubscribe = () => void;\n\n/**\n * An interface that can dynamically provide wallet adapters. This is useful for\n * cases where the list of wallet adapters is dynamic.\n */\nexport interface WalletAdapterProvider {\n  /** Get a list of wallet adapters from this provider. */\n  get(): WalletAdapter[];\n  /** Detect changes to the list of wallet adapters. */\n  on(\n    eventName: \"changed\",\n    callback: () => void\n  ): WalletAdapterProviderUnsubscribe;\n}\n\nexport type WalletAdapterOrProvider = WalletAdapterProvider | WalletAdapter;\nexport type WalletAdapterList = WalletAdapterOrProvider[];\n\nexport function isWalletAdapter(\n  wallet: WalletAdapterOrProvider\n): wallet is WalletAdapter {\n  return \"connect\" in wallet;\n}\n\nexport function isWalletProvider(\n  wallet: WalletAdapterOrProvider\n): wallet is WalletAdapterProvider {\n  return !isWalletAdapter(wallet);\n}\n\n/**\n * Takes an array of wallet adapters and providers, and resolves it to a\n * flat list of wallet adapters.\n */\nexport function resolveAdapters(adapterAndProviders: WalletAdapterList) {\n  return adapterAndProviders.flatMap((adapter) => {\n    if (isWalletProvider(adapter)) {\n      return adapter.get();\n    }\n\n    return adapter;\n  });\n}\n"],
  "mappings": "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",
  "names": ["import_react", "WalletConnectionStatus", "useState", "useEffect", "wallet"]
}
